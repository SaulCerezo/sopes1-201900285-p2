// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: proto/weather.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tweet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Country       string                 `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Weather       string                 `protobuf:"bytes,3,opt,name=weather,proto3" json:"weather,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tweet) Reset() {
	*x = Tweet{}
	mi := &file_proto_weather_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tweet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tweet) ProtoMessage() {}

func (x *Tweet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_weather_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tweet.ProtoReflect.Descriptor instead.
func (*Tweet) Descriptor() ([]byte, []int) {
	return file_proto_weather_proto_rawDescGZIP(), []int{0}
}

func (x *Tweet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tweet) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Tweet) GetWeather() string {
	if x != nil {
		return x.Weather
	}
	return ""
}

type TweetBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tweets        []*Tweet               `protobuf:"bytes,1,rep,name=tweets,proto3" json:"tweets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetBatch) Reset() {
	*x = TweetBatch{}
	mi := &file_proto_weather_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetBatch) ProtoMessage() {}

func (x *TweetBatch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_weather_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetBatch.ProtoReflect.Descriptor instead.
func (*TweetBatch) Descriptor() ([]byte, []int) {
	return file_proto_weather_proto_rawDescGZIP(), []int{1}
}

func (x *TweetBatch) GetTweets() []*Tweet {
	if x != nil {
		return x.Tweets
	}
	return nil
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_proto_weather_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_weather_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_proto_weather_proto_rawDescGZIP(), []int{2}
}

func (x *Ack) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Ack) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_proto_weather_proto protoreflect.FileDescriptor

const file_proto_weather_proto_rawDesc = "" +
	"\n" +
	"\x13proto/weather.proto\x12\aweather\"]\n" +
	"\x05Tweet\x12 \n" +
	"\vdescription\x18\x01 \x01(\tR\vdescription\x12\x18\n" +
	"\acountry\x18\x02 \x01(\tR\acountry\x12\x18\n" +
	"\aweather\x18\x03 \x01(\tR\aweather\"4\n" +
	"\n" +
	"TweetBatch\x12&\n" +
	"\x06tweets\x18\x01 \x03(\v2\x0e.weather.TweetR\x06tweets\"3\n" +
	"\x03Ack\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count2A\n" +
	"\x0eWeatherService\x12/\n" +
	"\n" +
	"SendTweets\x12\x13.weather.TweetBatch\x1a\f.weather.AckB8Z6github.com/SaulCerezo/TweetsClima/go-entry/proto;protob\x06proto3"

var (
	file_proto_weather_proto_rawDescOnce sync.Once
	file_proto_weather_proto_rawDescData []byte
)

func file_proto_weather_proto_rawDescGZIP() []byte {
	file_proto_weather_proto_rawDescOnce.Do(func() {
		file_proto_weather_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_weather_proto_rawDesc), len(file_proto_weather_proto_rawDesc)))
	})
	return file_proto_weather_proto_rawDescData
}

var file_proto_weather_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_weather_proto_goTypes = []any{
	(*Tweet)(nil),      // 0: weather.Tweet
	(*TweetBatch)(nil), // 1: weather.TweetBatch
	(*Ack)(nil),        // 2: weather.Ack
}
var file_proto_weather_proto_depIdxs = []int32{
	0, // 0: weather.TweetBatch.tweets:type_name -> weather.Tweet
	1, // 1: weather.WeatherService.SendTweets:input_type -> weather.TweetBatch
	2, // 2: weather.WeatherService.SendTweets:output_type -> weather.Ack
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_weather_proto_init() }
func file_proto_weather_proto_init() {
	if File_proto_weather_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_weather_proto_rawDesc), len(file_proto_weather_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_weather_proto_goTypes,
		DependencyIndexes: file_proto_weather_proto_depIdxs,
		MessageInfos:      file_proto_weather_proto_msgTypes,
	}.Build()
	File_proto_weather_proto = out.File
	file_proto_weather_proto_goTypes = nil
	file_proto_weather_proto_depIdxs = nil
}
